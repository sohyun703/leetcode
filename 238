class Solution(object):
    def productExceptSelf(self, nums):
        arr = []  # 중복값이 있는지 확인하기 위해서 -> 0만 존재하는지 확인하기 위한 절차.
        result = []  # return값
        k = 1  # 곱셈 결과
        count = 0  # 0의 개수

        # 중복 제거
        for num in nums:
            if num not in arr:
                arr.append(num)

        # 0의 개수 세기
        for num in nums:
            if num == 0:
                count += 1

        # 0이 있는 경우의 nums의 모든 요소의 곱셈 결과 구하기.
        # 1. 0만 존재하는 경우
        if count > 2:
            k = 0
        # 0만 존재하는 경우가 아닌 경우
        else:
            # 0이 존재하는 경우
            if 0 in nums:
                for i in range(len(nums)):
                    if nums[i] == 0:
                        continue
                    else:
                        k *= nums[i]
            # 0이 존재하지 않는 경우
            else:
                for i in range(len(nums)):
                    k *= nums[i]

        # 1. 0만 존재하는 경우
        arr =[]
        for value in nums:
          if value not in arr:
            arr.append(value)

        if count >= 2:
            for i in range(len(nums)):
                result.append(0)
        # 0만 존재하는 경우가 아닌 경우
        elif len(arr) ==1 and arr[0]==0:
          for i in range(len(nums)):
            result.append(0)
        else:
            # 0이 존재하는 경우
            if 0 in nums:
                for i in range(len(nums)):
                    if nums[i] == 0:
                        result.append(k)
                    else:
                        result.append(0)
            # 0이 존재하지 않는 경우
            else:
                for i in range(len(nums)):
                    result.append(int(k / nums[i]))

        return result


nums = [0,4,0]
solution = Solution()
print(solution.productExceptSelf(nums))


# 1. 리스트 안에 0이 있는 경우
#     1. 0만 존재하는 경우는 → 0이 답이다.
#     2. 0이 1개 있는 경우 → 0을 제외하고 곱해주면 됨
#     3. 0이 2개 이상 있는 경우 0이 된다.
# 2. 리스트 안에 0이 없는 경우
#     1. 곱셈 결과에서 자신을 나누어주면 됨.
